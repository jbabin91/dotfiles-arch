#!/bin/bash

local bookmarks_dir="$HOME/.local/share/zsh/bookmarks"

################################### BOOKMARKS ##################################

# Bookmark current working directory.
function bm() {
    
    [[ -z "$1" ]] && \
    echo "Error: Provide a name for the bookmark." && \
    return
    
    wd=$(pwd)
    
    [[ ! -f $bookmarks_dir ]] && \
    echo "$1=$wd" > $bookmarks_dir && \
    echo "$1 added." && \
    return
    
    while IFS= read -r line; do
        [[ $line =~ $1  ]] && echo "Bookmark $1 already exists." && return
    done < $bookmarks_dir
    
    echo "$1=$wd" >> $bookmarks_dir && echo "$1 added."
}

# Jump to bookmark.
function j() {
    [[ ! -f $bookmarks_dir ]] && \
    echo "You don't have any bookmarks yet." && \
    return
    
    [[ $SHELL == "/opt/homebrew/bin/zsh" ]] && setopt local_options BASH_REMATCH
    
    [[ -z "$1" ]] && \
    echo "Error: Provide a bookmark name." && \
    return
    
    local bookmarks=$(cat $bookmarks_dir)
    
    [[ $bookmarks =~ ($1=[[:print:]]*) ]] && \
    [[ ${BASH_REMATCH[1]} =~ (=[[:print:]]*) ]] && \
    cd ${BASH_REMATCH[1]:1} && \
    return
    
    echo "Bookmark $1 does not exist."
}

# Remove a bookmark.
function db() {
    [[ ! -f $bookmarks_dir ]] && \
    echo "You don't have any bookmarks yet." && \
    return
    
    [[ -z "$1" ]] && \
    echo "Error: Provide a bookmark name." && \
    return
    
    arg="/^$1=.*/d"
    sed -i "" $arg $bookmarks_dir
    echo "Bookmark $1 removed."
}

# List bookmarks.
function bl() {
    [[ ! -f $bookmarks_dir ]] && \
    echo "You don't have any bookmarks yet." && \
    return
    
    cat $bookmarks_dir
}

##################################### CORE #####################################

# Reload the shell
function src()
{
    # Clean the cache
    local cache=$ZSH_CACHE_DIR
    autoload -U compinit zrecompile
    compinit -d "$cache/zcomp-$HOST"
    
    # Remove any old compiled files
    for f in ~/.zshrc "$cache/zcomp-$HOST"; do
        zrecompile -p $f && command rm -f $f.zwc.old
    done
    
    # Load the shell dotfiles:
    # for file in ~/.{aliases,functions,path}; do
    #     [ -r "$file" ] && [ -f "$file" ] && source "$file"
    # done
    
    echo "Sourced!"
    exec zsh
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$@"
}

# Print the current timestamp
function now() {
    now=$(date '+%F %T')
    echo $now | pbcopy
    echo $now
    echo '...has been copied to the clipboard'
}

# 'nv' with no arguments opens the current directory in Vim, otherwise opens the given location
function nv() {
    if [ $# -eq 0 ]; then
        nvim;
    else
        nvim "$@";
    fi;
}

# 'o' with no arguments opens the current directory, otherwise opens the given location
function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
}

#################################### DOCKER ####################################

# Run specific Docker commands where the first arg is the docker env to use
# e.g. dev or prod
function dk() {
    envtouse=$1
    shift
    docker-compose -f "docker-compose.${envtouse}.yml" $@
}

##################################### TMUX #####################################

# Boot tmux if tmux exists and is not running.
function exec_tmux() {
  which tmux &> /dev/null && \
    [ -n "$PS1" ] && \
    [[ ! "$TERM" =~ screen ]] && \
    [[ ! "$TERM" =~ tmux ]] && \
    [ -z "$TMUX" ] && \
    exec tmux
}

# Create a new Tmux session that shares all windows with a previous session
function ta {
    tmux new-session -s $2 -t $1
}


function popuptmux {
    width=${2:-85%}
    height=${2:-85%}
    if [ "$(tmux display-message -p -F "#{session_name}")" = "popup" ];then
        tmux detach-client
    else
        tmux popup -d '#{pane_current_path}' -xC -yC -w$width -h$height -E "tmux attach -t popup || tmux new -s popup"
    fi
}

##################################### MISC #####################################

# Copy the pwd
function cpwd() {
    pwd | pbcopy
}

function print_divider() {
    divider=""
    wincols=$(expr $(tput cols) - 1)
    for _ in {0..$wincols}; do
        divider+="-"
    done
    echo $divider
}

# Test that 256 colors are working in the terminal
function col {
    echo -e 'Should be a smooth gradient:'
    awk 'BEGIN{
        s="/\\/\\/\\/\\/\\"; s=s s s s s s s s;
        for (colnum = 0; colnum<77; colnum++) {
            r = 255-(colnum*255/76);
            g = (colnum*510/76);
            b = (colnum*255/76);
            if (g>255) g = 510-g;
            printf "\033[48;2;%d;%d;%dm", r,g,b;
            printf "\033[38;2;%d;%d;%dm", 255-r,255-g,255-b;
            printf "%s\033[0m", substr(s,colnum+1,1);
        }
        printf "\n";
    }'
}

# Test that italics are working in the terminal
function italic {
    echo -e "\e[3mThis text should be in italics\e[23m"
}
